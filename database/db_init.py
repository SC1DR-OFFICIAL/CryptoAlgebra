# init_db.py
import asyncio
import asyncpg
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

DB_CONFIG = {
    "host": "quumdrafueyun.beget.app",
    "port": 5432,
    "user": "cloud_user",
    "password": "eLT1ApRZ%Fkf",
    "database": "default_db"
}


async def init_db():
    conn = await asyncpg.connect(**DB_CONFIG)
    await conn.execute("SET search_path TO public;")
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    await conn.execute('''
    CREATE TABLE IF NOT EXISTS "user" (
        id SERIAL PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        rsa_public_key TEXT,
        password_hash TEXT NOT NULL,
        is_admin BOOLEAN NOT NULL DEFAULT FALSE
    );
    ''')

    # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    await conn.execute('''
    CREATE TABLE IF NOT EXISTS poll (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        end_date TEXT NOT NULL,
        public_key_n TEXT,
        public_key_g TEXT,
        private_key TEXT
    );
    ''')

    # –í–∞—Ä–∏–∞–Ω—Ç—ã
    await conn.execute('''
    CREATE TABLE IF NOT EXISTS poll_options (
        id SERIAL PRIMARY KEY,
        poll_id INTEGER NOT NULL REFERENCES poll(id) ON DELETE CASCADE,
        option_text TEXT NOT NULL
    );
    ''')

    # –ì–æ–ª–æ—Å–∞ (–±–µ–∑ signature)
    await conn.execute('''
    CREATE TABLE IF NOT EXISTS vote (
        id SERIAL PRIMARY KEY,
        poll_id INTEGER NOT NULL REFERENCES poll(id) ON DELETE CASCADE,
        user_id INTEGER NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
        ciphertexts TEXT NOT NULL,
        signature TEXT
    );
    ''')

    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã.")
    await conn.close()
    logger.info("üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î.")


if __name__ == "__main__":
    asyncio.run(init_db())
